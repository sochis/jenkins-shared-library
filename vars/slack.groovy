/**
 * Methods for customizing slack notification.
 */
import hudson.tasks.junit.TestResultAction;

def generateStatusAttachment(Object script, Object jsonString) {
    /*
     * Generate the format for slack notification.
     *
     * @param script(Object): the surrounding class (instance). 
     * @param jsonString(Object): List or String of json. The value generated by readjson(file:*)
     */
    def statusMap = [
        'STARTED': [
            color: '#FFF000',
            emoji: ':yellow_ball:'

        ],
        'SUCCESS': [
            color: '#00FF00',
            emoji: ':green_ball:'

        ],
        'UNSTABLE': [
            color: '#FFF000',
            emoji: ':yellow_ball'

        ],
        'ABORTED': [
            color: '#BEBEBE',
            emoji: ':grey_ball:'

        ],
        'NOT_BUILT': [
            color: '#BEBEBE',
            emoji: ':grey_ball:'

        ],
        'FAILURE': [
            color: '#FF0000',
            emoji: ':red_ball:'

        ],
    ]

    def statusAttachment = [
        fallback: '',
        color: '',
        title: '',
        title_lint: '',
        text: '',
        fields: []
    ]

    def statusMapObject = statusMap["${script.currentBuild.currentResult}"] ?: statusMap['FAILURE']
    def additional_title = jsonString.find{ it.key == "additinal_title" }?.value ?: ""
    if (jsonString.find { it.key == "fallback" }?.value != "")
        statusAttachment.fallback = jsonString.find{ it.key == "fallback" }?.value ?: "${statusAttachment.title}: ${script.env.BUILD_NUMBER}"
    if (jsonString.find { it.key == "title" }?.value != "")
        statusAttachment.title = jsonString.find{ it.key == "title" }?.value ?: "${script.env.JOB_NAME} (${script.env.BUILD_NUMBER}) ${additional_title}"
    if (jsonString.find { it.key == "title_link" }?.value != "")
        statusAttachment.title_link = jsonString.find{ it.key == "title_link" }?.value ?: "${script.env.RUN_DISPLAY_URL}"
    if (jsonString.find { it.key == "text" }?.value != "")
        statusAttachment.text = jsonString.find{ it.key == "text" }?.value ?: ""
    statusAttachment.color = statusMapObject.color

    statusAttachment.fields = []
    if (jsonString.find { it.key == "build_statis" }?.value != false) {
        statusAttachment.fields + = [
            title: 'Build status',
            value: "${script.currentBuild.currentResult} ${statusMapObject.emoji}",
            short: true
        ]
    }

    if (jsonString) {
        jsonString['fields'].each { items ->
            statusAttachment.fields.push([
                title: items.find{ it.key == "title" }?.value ?: "",
                value: items.find{ it.key == "value" }?.value ?: "",
                short: items.find{ it.key == "short" }?.value ?: false
            ])
        }
    }

    return statusAttachment
}

def getAttachments(script, String type='default', Object jsonData='') {
    /*
     * Generate the format for slack notification. Need slack notification plugin.(https://plugins.jenkins.io/slack/)
     *
     * @param script(Object): the surrounding class (instance).
     * @param type(String): The type of jsonData. `file` or `string` is valid.
     * @param jsonData(String): Json string or file name.
     * @param attachments(List): The attachments to be used for sending messages to slack.
     *
     * @usage: use like following.
     *  def slackInfo = """
     *    {
     *      "fields": [
     *        {"title": "Username", "value": "sample user"},
     *        {"title": "Result", "value": "Passed."}
     *      ]
     *    }   
     *  """
     *  attachments = slack.getattachments(this, 'string', slackInfo)
     *  slackSend(channel: "channel_name", attachment: attachments, failOnError:true)
     *
     */

     def jsonString = ''
     if (type='file') {
        jsonString = readJSON file: "${jsonData}"
     } else if (type=='string') {
        jsonString = readJSON text: "${jsonData}"
     } else if (type=='default') {
        println('Use default parameters to send information to slack.')
     } else {
        throw new Exception('`file` or `string` is valid. `file` if you want to use json file, `string` if you want to use json string.')
     }

     def attachments = []
     attachments += generateStatusAttachment(script, jsonString)
     return attachments
}


